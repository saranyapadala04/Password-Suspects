#PASSWORD SUSPECTS
import sys
import string
from itertools import permutations,product
import math


#Function to generate the suspects
def generate_suspects(pwd_len,no_of_subs) :
    count = 0
    
    #CASE-1:When both the password length and no of substrings known are zero
    if pwd_len == 0 and no_of_subs == 0:
        exit()
        
    #CASE-2:When number substrings known is zero
    if no_of_subs == 0 :
        if pwd_len == 1 :
            return 26,list(string.ascii_lowercase)
        elif 1 < pwd_len < 25 :
            return 26**pwd_len,[]

    #CASE-3:When both the password length and no of substrings known are not zero
    alpha = string.ascii_lowercase
    subs_lst = list()
    sum_of_len_of_subs = 0
    
    #Taking all the input substrings into a list and finding their sum of lengths
    if 1 <= pwd_len <= 25 and 1 <= no_of_subs <= 10 :
        for i in range(3,no_of_subs+3) :
            count = count+1
            subs_lst.append(sys.argv[i])    
            sum_of_len_of_subs += len(sys.argv[i])

    #CASE-3.1:When sum of lengths of substrings is equal to length of the password
    suspects_lst = []
    if sum_of_len_of_subs == pwd_len :
        for i in sorted(set(permutations(subs_lst))) :
            suspects_lst.append("".join(i))
        return len(suspects_lst),suspects_lst

    

#TAKING INPUTS FROM CMD LINE ARGS
pwd_len = int(sys.argv[1])
no_of_subs = int(sys.argv[2])
suspects_lst = list() 


#CALLING FUNCTION 
no_of_suspects,suspects_lst=generate_suspects(pwd_len,no_of_subs)
if no_of_suspects > 42:
    print(no_of_suspects,"suspects")
elif no_of_suspects <= 42:
    print(no_of_suspects,"suspects")
    for i in suspects_lst:
        print(i)
